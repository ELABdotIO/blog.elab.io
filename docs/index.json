[{"iconClass":"fa-folder","objectID":"90fdbbad97ab9d7fa75d803e7817c7c4","title":"Life","type":"category","url":"/categories/life"},{"iconClass":"fa-folder","objectID":"6e0db0bd9e4cf8cdb483181fa80a5e99","title":"Music","type":"category","url":"/categories/music"},{"iconClass":"fa-folder","objectID":"d14900f55de650e1932fe40f8d349787","title":"Running","type":"category","url":"/categories/running"},{"iconClass":"fa-folder","objectID":"18f67a00ff7a9f44290987bb98042357","title":"Technology","type":"category","url":"/categories/technology"},{"iconClass":"fa-tag","objectID":"3bdd72dda0383e778d56d7db097b8702","title":"Bible","type":"tag","url":"/tags/bible"},{"iconClass":"fa-tag","objectID":"a4b9aaa55f5266526c9a8c9f437b22b2","title":"Development","type":"tag","url":"/tags/development"},{"iconClass":"fa-tag","objectID":"6df3a1d821a854f301acc6022aa964e5","title":"Go","type":"tag","url":"/tags/go"},{"iconClass":"fa-tag","objectID":"febb73ebbefbd57524600fe1002a2edf","title":"Golang","type":"tag","url":"/tags/golang"},{"iconClass":"fa-tag","objectID":"ffc1b1d84b39162c33b93bdc9ed41220","title":"Hugo","type":"tag","url":"/tags/hugo"},{"iconClass":"fa-tag","objectID":"9f4b8093c53d4b50b1cfb6ca04db2be4","title":"Markdown","type":"tag","url":"/tags/markdown"},{"iconClass":"fa-tag","objectID":"b9a9baaa4a97d641aaf13f0312bf4971","title":"Templates","type":"tag","url":"/tags/templates"},{"iconClass":"fa-tag","objectID":"7958ca3af67ec3cbb8874f8f329f4028","title":"Theme","type":"tag","url":"/tags/theme"},{"iconClass":"fa-tag","objectID":"1f0fdff678ceec9e2bbc82b11a660f55","title":"Themes","type":"tag","url":"/tags/themes"},{"iconClass":"fa-tag","objectID":"ea1dc4bccdeb0135a66261a5486a26c9","title":"傳道書","type":"tag","url":"/tags/傳道書"},{"author":null,"categories":["Bible","傳道書"],"content":"  傳道書1章：1-18 1:1 在 耶 路 撒 冷 作 王 、 大 衛 的 兒 子 、 傳 道 者 的 言 語 。\n1:2 傳 道 者 說 、 虛 空 的 虛 空 、 虛 空 的 虛 空 ． 凡 事 都 是 虛 空 。\n1:3 人 一 切 的 勞 碌 、 就 是 他 在 日 光 之 下 的 勞 碌 、 有 甚 麼 益 處 呢 。\n1:4 一 代 過 去 、 一 代 又 來 ． 地 卻 永 遠 長 存 。\n1:5 日 頭 出 來 、 日 頭 落 下 、 急 歸 所 出 之 地 。\n1:6 風 往 南 颳 、 又 向 北 轉 、 不 住 的 旋 轉 、 而 且 返 回 轉 行 原 道 。\n1:7 江 河 都 往 海 裡 流 、 海 卻 不 滿 ． 江 河 從 何 處 流 、 仍 歸 還 何 處 ．\n1:8 萬 事 令 人 厭 煩 〔 或 作 萬 物 滿 有 困 乏 〕 人 不 能 說 盡 ． 眼 看 、 看 不 飽 、 耳 聽 、 聽 不 足 。\n1:9 已 有 的 事 、 後 必 再 有 ． 已 行 的 事 、 後 必 再 行 ． 日 光 之 下 並 無 新 事 。\n1:10 豈 有 一 件 事 人 能 指 著 說 、 這 是 新 的 ． 那 知 、 在 我 們 以 前 的 世 代 、 早 已 有 了 。\n1:11 已 過 的 世 代 、 無 人 記 念 、 將 來 的 世 代 、 後 來 的 人 也 不 記 念 。\n1:12 我 傳 道 者 在 耶 路 撒 冷 作 過 以 色 列 的 王 。\n1:13 我 專 心 用 智 慧 尋 求 查 究 天 下 所 作 的 一 切 事 、 乃 知 神 叫 世 人 所 經 練 的 、 是 極 重 的 勞 苦 。\n1:14 我 見 日 光 之 下 所 作 的 一 切 事 、 都 是 虛 空 、 都 是 捕 風 。\n1:15 彎 曲 的 不 能 變 直 ． 缺 少 的 不 能 足 數 。\n1:16 我 心 裡 議 論 、 說 、 我 得 了 大 智 慧 、 勝 過 我 以 前 在 耶 路 撒 冷 的 眾 人 ． 而 且 我 心 中 多 經 歷\n智 慧 、 和 知 識 的 事 。\n1:17 我 又 專 心 察 明 智 慧 、 狂 妄 、 和 愚 昧 ． 乃 知 這 也 是 捕 風 。\n1:18 因 為 多 有 智 慧 、 就 多 有 愁 煩 ． 加 增 知 識 的 、 就 加 增 憂 傷 。\n 世上有知識的人何其多。可是真有智慧的人卻不多。世人追求許多不能長存的東西，例如金錢，知識和物質，精神的享受。 神說，我們應該把眼目放到永恆的事情上。例如，幫助別人恢復跟神的關係。  Just Test Image Caption         凡事不要單靠人自己的智慧去解決問題，乃要依靠神，求從他而來的智慧來應付人生中所遇到的挑戰。\n最近在工作上開始沒有與主同行，雖事情還是順利可心裡總有點不踏實。自己做事跟與神一起做事的感覺是非常不一樣。但願聖靈每天題醒在每天工作之前都要好好的禱告。與神同在。\n","iconClass":"fa-pencil","objectID":"496396044da35e61c6d880fa5bc83a6d","tags":["Bible","傳道書"],"title":"論智慧","type":"post","url":"/post/about-wisdom/"},{"author":null,"categories":["go","golang","templates","themes","development"],"content":" Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.\nThis document is a brief primer on using go templates. The go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that go templates parse very quickly.\nA unique characteristic of go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the go docs.\nBasic Syntax Go lang templates are html files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in go, the go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright © 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;  ","iconClass":"fa-pencil","objectID":"3de7ce1e2a75ad4a45bf78673b0a1e48","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer","type":"post","url":"/post/goisforlovers/"},{"author":null,"categories":["go","golang","hugo","development"],"content":" Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at installing hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting ctrl+c.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building.. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n","iconClass":"fa-pencil","objectID":"cf4c0354acb2ed25f05c19f10ef18445","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo","type":"post","url":"/post/hugoisforlovers/"},{"author":null,"categories":null,"content":" Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n Change your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public  Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n","iconClass":"fa-pencil","objectID":"1eaf27351cfc815b3d44a8c3c231de0e","tags":null,"title":"Migrate to Hugo from Jekyll","type":"post","url":"/post/migrate-from-jekyll/"},{"author":null,"categories":["Markdown","Theme","Hugo"],"content":"这篇文章集中说明本人博客主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些部分的样式，可以去修改 content.scss 和 shortcodes.scss 这两个文件。预告一下，我所用的这个名为 Nuo 的 Hugo 也将于近期发布，敬请期待。\n\n1. 标题 H1 H2 H3 H4 H5 H6 2. 段落 使用单引号 * 或者单下划线 _ 标记 斜体强调 或者 斜体强调\n使用两个引号 ** 或者两个下划线 __ 标记 加粗强调 或者 加粗强调\n引号和下划线可叠加使用 → 只是加粗 斜体并加粗\n使用两个波浪线 ~~ 标记 已删除文字\n插入文字暂无 Markdown 标记，直接使用 HTML 标签 \u0026lt;ins\u0026gt; 标记 插入文字\n行内代码使用反引号标记 → print(\u0026quot;hello world\u0026quot;)\n上标 X2 / 下标 X2\n按键 Ctrl\n外链 chekun\u0026rsquo;s blog\n页面内段落 图片\n注意：你可以通过 {#section-id} 方式自定义段落锚点\n参考资料 [1][2]\n数字引用 编号为 1 的链接\n3. 列表 以下的无序、有序和任务列表均支持二级嵌套，不建议使用二级以上嵌套。\n3.1 无序列表  无序列表  嵌套的无序列表 嵌套的无序列表  无序列表  嵌套的有序列表 嵌套的有序列表  无序列表  3.2 有序列表  有序列表  嵌套的有序列表 嵌套的有序列表  有序列表  嵌套的无序列表 嵌套的无序列表  有序列表  3.3 定义列表  CSS 层叠样式表  3.4 任务列表 Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考  七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票   4. 引用  野火烧不尽，春风吹又生。\n\u0026ndash; 白居易《赋得古原草送别》\n 5. 代码 以本站的一段 JavaScript 代码做演示。\n// Initialize video.js player if (document.getElementById(\u0026#39;my-player\u0026#39;) !== null) { /* eslint-disable no-undef */ videojs(\u0026#39;#my-player\u0026#39;, { aspectRatio: \u0026#39;16:9\u0026#39;, fluid: true, }); } 6. 分割线 中间能写字的分割线，如果你修改了分割线中字的内容，请配合修改 CSS 样式。\n7. 图片 不带标题的图片，如下图👇\n带标题的图片，如下图👇\n 显然，这是一只梅花鹿   8. 表格 使用 Markdown 画的表格，如下表👇\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    使用 HTML 画的表格，如下表👇\n注意：下表叠加应用了 is-centered is-striped is-bordered is-narrow 四种表格样式。\n 值班人员 星期一 星期二 星期三   李强 张明 王平   9. 数学公式 主题使用了 MathJax 开源库来实现对数学公式的支持，使用 $$ 标记。\n$$ evidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} $$\n10. JSFiddle 引入 JSFiddle 网站的代码范例，在主题目录 layouts/shortcodes 文件夹下的 jsfiddle.html 对该标签进行定义。\n 11. Codepen 引入 Code Pen 网站的代码演示，在主题目录 layouts/shortcodes 文件夹下的 codepen.html 对该标签进行定义。\nSee the Pen 🐍 Snake Rush by Ritchie Zhu (@laozhu) on CodePen.  12. 声享 PPT 引入 声享 PPT 演示文稿，在主题目录 layouts/shortcodes 文件夹下的 shengxiang.html 对该标签进行定义。\n 13. 本地视频 主题使用了 video.js 播放视频文件，你还可以自己定义视频的封面，在主题目录 layouts/shortcodes 文件夹下的 video.html 对该标签进行定义。\n   To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video\n 14. 网易云音乐 主题文章中可以轻松插入 网易云音乐 的指定音乐，你可以根据需要将音乐设置为自动播放，在主题目录 layouts/shortcodes 文件夹下的 music.html 对该标签进行定义。\n 15. Gist 代码片段 除了本地的代码片段，主题中可使用 GitHub 的 Gist 服务轻松插入代码片段。\n 16. Tweet 由于不明原因可能无法访问。\n17. YouTube 由于不明原因可能无法播放。\n  18. Instagram 由于不明原因可能无法访问。\n参考资料  Markdown Cheatsheet Markdown 语法手册 ","iconClass":"fa-pencil","objectID":"5928d4e0670e4aa223b71a2be06bd768","tags":["Markdown","Theme","Hugo"],"title":"Hugo 主题 Nuo 文章样式预览","type":"post","url":"/post/hugo-nuo-post-preview/"}]